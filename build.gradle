buildscript {
   repositories {
      mavenCentral()
      maven { url "https://plugins.gradle.org/m2/" }
      mavenLocal()
      jcenter()
   }

   dependencies {
      classpath 'net.saliman:gradle-properties-plugin:1.5.1'
   }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'net.saliman.properties'


def vcsurl = 'https://github.com/halodi/halodi-robot-models'
group = "com.halodi"
def inputVersion= project.hasProperty("artifactVersion") ? 
                project.getProperty("artifactVersion"): System.getenv('ARTIFACT_VERSION')
version = "$inputVersion$versionAppendix"
def repoUrl = "https://artifacts.halodi.com/repository"

def excludedFiles = [ '**/build', '**/cmake', '**/CMakeLists.txt', '**/package.xml', '**/model.config', '**/urdf.in', 'unity' ]



sourceSets {
    main {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = []
        }
   }
}

jar {
    
    file(".").eachFile(groovy.io.FileType.DIRECTORIES) {
    
        def packageFile = new File(it, "package.xml");
        if(packageFile.exists()) {
        
            def targetPackage = 'com/halodi/models/' + it.name;
            def sourceFolder = file(it);
            into targetPackage, {
                from sourceFolder
                exclude excludedFiles
            }
        }   
    }
}




// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Jesper Smith"
            email "jesper@halodi.com"
        }
    }
    
    scm {
       url vcsurl
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        JavaPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId project.name
            version version
        }
    }
}


publishing {
    repositories {
        maven {
            def inputUsername = project.hasProperty("artifactUsername") ? 
                project.getProperty("artifactUsername"): System.getenv('ARTIFACT_USERNAME')
            def inputPassword = project.hasProperty("artifactPassword") ? 
                project.getProperty("artifactPassword"): System.getenv('ARTIFACT_PASSWORD')
            credentials {
                username inputUsername
                password inputPassword
            }
            url "$repoUrl$repository"
        }
    }
}
